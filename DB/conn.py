import psycopg2
from psycopg2.extras import RealDictCursor

# Connection string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Neon database
CONNECTION_STRING = "postgresql://neondb_owner:npg_pO7oQiMzwxJ2@ep-raspy-rice-a1rij5tx-pooler.ap-southeast-1.aws.neon.tech/library?sslmode=require"

def connect_to_neon():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Neon database ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
    try:
        conn = psycopg2.connect(CONNECTION_STRING, cursor_factory=RealDictCursor)
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return conn
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

def execute_query(query, params=None):
    """‡∏£‡∏±‡∏ô SQL query ‡πÅ‡∏•‡∏∞ return ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
    conn = connect_to_neon()
    if not conn:
        return None
    
    try:
        cursor = conn.cursor()
        cursor.execute(query, params)
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô SELECT statement
        if query.strip().upper().startswith('SELECT'):
            result = cursor.fetchall()
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô INSERT/UPDATE/DELETE
            conn.commit()
            result = cursor.rowcount
            
        cursor.close()
        conn.close()
        return result
        
    except Exception as e:
        print(f"‚ùå Query ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        conn.rollback()
        conn.close()
        return None

def get_books():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    return execute_query("SELECT * FROM books ORDER BY bookid")

def get_borrowers():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    return execute_query("SELECT * FROM borrowers ORDER BY return_date")

def add_book(title, description, quantity, reviews=""):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà"""
    query = "INSERT INTO books (title, description, quantity, reviews) VALUES (%s, %s, %s, %s)"
    result = execute_query(query, (title, description, quantity, reviews))
    if result:
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ '{title}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    return result

def add_borrower(borrower_name, bookid, quantity_borrowed, return_date):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà"""
    query = "INSERT INTO borrowers (borrower_name, bookid, quantity_borrowed, return_date) VALUES (%s, %s, %s, %s)"
    result = execute_query(query, (borrower_name, bookid, quantity_borrowed, return_date))
    if result:
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏° '{borrower_name}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    return result

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
    books = get_books()
    if books:
        print(f"üìö ‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ {len(books)} ‡πÄ‡∏•‡πà‡∏°:")
        for book in books:
            print(f"  - {book['title']}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°
    borrowers = get_borrowers()
    if borrowers:
        print(f"üë• ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏° {len(borrowers)} ‡∏Ñ‡∏ô:")
        for borrower in borrowers:
            print(f"  - {borrower['borrower_name']}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
    add_book("‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö", "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö", 5, "‡∏î‡∏µ‡∏°‡∏≤‡∏Å")
    
    print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
